# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/08_evaluator.ipynb.

# %% auto 0
__all__ = ['do_evalu_opt', 'do_evalu_non', 'evalu_schedule_opt', 'evalu_schedule_non']

# %% ../nbs/08_evaluator.ipynb 5
# from collections import namedtuple, defaultdict
# import numpy as np
import pandas as pd
# import matplotlib as mpl
# import matplotlib.pyplot as plt
from copy import copy
import time
# import math
# from pprint import pprint
## !pip install -U "ray"
# import ray
# import json

import aishiftscheduler.config as cf
import aishiftscheduler.model as mod
import aishiftscheduler.policy as pol

# %% ../nbs/08_evaluator.ipynb 7
pd.options.display.float_format = '{:,.4f}'.format
pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', None)
pd.set_option('display.max_colwidth', None)

# %% ../nbs/08_evaluator.ipynb 8
def do_evalu_opt(L, T, Best_theta_Alloc, pars):
  M = mod.Model(pars)
  P = pol.Policy(M)
  ## DEM = DemandSimulator(seed=SEED_EVALU)
  ## MER = MeritSimulator(seed=SEED_EVALU)

  thetasOpt = []; thetasOpt.append(Best_theta_Alloc)
  return \
    P.perform_grid_search_sample_paths('X__Alloc', thetasOpt, L, T, pars)

# %% ../nbs/08_evaluator.ipynb 9
def do_evalu_non(L, T, Worst_theta_Alloc, pars):
  M = mod.Model(pars)
  P = pol.Policy(M)
  ## DEM = DemandSimulator(seed=SEED_EVALU)
  ## MER = MeritSimulator(seed=SEED_EVALU)

  thetasNon = []; thetasNon.append(Worst_theta_Alloc)
  ## thetasNon = []; thetasNon.append(
  ##   Policy(None).build_theta(
  ##     {'thCumShifts': 1.0, 'thSickProb': 1.0}
  ##   )
  ## )
  return \
    P.perform_grid_search_sample_paths('X__Alloc', thetasNon, L, T, pars)

# %% ../nbs/08_evaluator.ipynb 10
def evalu_schedule_opt(L, T, First_n_t, trn_Best_theta, pars):
    start = time.time()

    ThetaStar_expCbarcum_evalu_opt, ThetaStar_expCtilcum_evalu_opt, \
    _, _, \
    Best_theta_evalu_opt, Worst_theta_evalu_opt, \
    _, _, \
    _, _, \
    Record_evalu_opt = \
      do_evalu_opt(L, T, trn_Best_theta, pars)
    
    Df_evalu_opt = pd.DataFrame.from_records(
      Record_evalu_opt[:First_n_t], columns=pars.LABELS)
    print(f'{ThetaStar_expCbarcum_evalu_opt.iloc[-1]=:.2f}')
    end = time.time(); print(f'EXECUTION TIME: {end - start} seconds')
    return Best_theta_evalu_opt, Worst_theta_evalu_opt, Df_evalu_opt

# %% ../nbs/08_evaluator.ipynb 11
def evalu_schedule_non(L, T, First_n_t, trn_Worst_theta, pars):
    start = time.time()

    ThetaStar_expCbarcum_evalu_non, ThetaStar_expCtilcum_evalu_non, \
    _, _, \
    Best_theta_evalu_non, Worst_theta_evalu_non, \
    _, _, \
    _, _, \
    Record_evalu_non = \
      do_evalu_non(L, T, trn_Worst_theta, pars)
    
    Df_evalu_non = pd.DataFrame.from_records(
      Record_evalu_non[:First_n_t], columns=pars.LABELS)
    print(f'{ThetaStar_expCbarcum_evalu_non.iloc[-1]=:.2f}')
    end = time.time(); print(f'EXECUTION TIME: {end - start} seconds')
    return Best_theta_evalu_non, Worst_theta_evalu_non, Df_evalu_non
