# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/06_visualization.ipynb.

# %% auto 0
__all__ = ['Visualization']

# %% ../nbs/06_visualization.ipynb 5
# from collections import namedtuple, defaultdict
from collections import defaultdict
import numpy as np
import pandas as pd
import matplotlib as mpl
import matplotlib.pyplot as plt
from copy import copy
# import time
# import math
# from pprint import pprint
## !pip install -U "ray"
# import ray
# import json

from fastcore.basics import patch
import aishiftscheduler.config as cf
import aishiftscheduler.policy as pol
# from aishiftscheduler.model import * ## cause cyclic import

# %% ../nbs/06_visualization.ipynb 9
pd.options.display.float_format = '{:,.4f}'.format
pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', None)
pd.set_option('display.max_colwidth', None)

# %% ../nbs/06_visualization.ipynb 10
class Visualization(): pass

# %% ../nbs/06_visualization.ipynb 11
@patch
def round_theta(self:Visualization, complex_theta):
    thetas_rounded = []
    for theta in complex_theta:
      evalues_rounded = []
      for _, evalue in theta.items():
        evalues_rounded.append(float(f"{evalue:f}"))
      thetas_rounded.append(tuple(evalues_rounded))
    return str(tuple(thetas_rounded))

# %% ../nbs/06_visualization.ipynb 12
@patch
def plot_Fhat_map_2(self:Visualization,
      FhatI_theta_I,
      thetasX, thetasY, labelX, labelY, title):
      Fhat_values = [
        FhatI_theta_I[
          (thetaX,thetaY)
          ## ((thetaX,),(thetaY,))
        ]
          for thetaY in thetasY for thetaX in thetasX
      ]
      Fhats = np.array(Fhat_values)
      increment_count = len(thetasX)
      Fhats = np.reshape(Fhats, (-1, increment_count))#.

      fig, ax = plt.subplots()
      im = ax.imshow(Fhats, cmap='hot', origin='lower', aspect='auto')
      ## create colorbar
      cbar = ax.figure.colorbar(im, ax=ax)
      ## cbar.ax.set_ylabel(cbarlabel, rotation=-90, va="bottom")

      ax.set_xticks(np.arange(0, len(thetasX), 5))#.
      ## ax.set_xticks(np.arange(len(thetasX)))

      ax.set_yticks(np.arange(0, len(thetasY), 5))#.
      ## ax.set_yticks(np.arange(len(thetasY)))

      ## NOTE: round tick labels, else very messy
      ## function round() does not work, have to do this way
      thetasX_form = [f'{th:.0f}' for th in thetasX]
      thetasY_form = [f'{th:.0f}' for th in thetasY]

      ax.set_xticklabels(thetasX[::5])
      ## ax.set_xticklabels(thetasX); ax.set_xticklabels(thetasX_form)

      ax.set_yticklabels(thetasY[::5])
      ## ax.set_yticklabels(thetasY); ax.set_yticklabels(thetasY_form)

      ## rotate the tick labels and set their alignment.
      ## plt.setp(ax.get_xticklabels(), rotation=45, ha="right",rotation_mode="anchor")

      ax.set_title(title)
      ax.set_xlabel(labelX)
      ax.set_ylabel(labelY)

      ## fig.tight_layout()
      plt.show()
      return True

# %% ../nbs/06_visualization.ipynb 13
@patch
def plot_Fhat_map_3(self:Visualization,
      FhatI_theta_I,
      thetasX, thetasY, labelX, labelY, title,
      thetaFixed1):
      ## Fhat_values = [FhatI_theta_I[(thetaX,thetaY)] for thetaY in thetasY for thetaX in thetasX]
      Fhat_values = [
        FhatI_theta_I[(thetaX,thetaY, thetaFixed1)]
        for thetaY in thetasY
          for thetaX in thetasX]
      Fhats = np.array(Fhat_values)
      increment_count = len(thetasX)
      Fhats = np.reshape(Fhats, (-1, increment_count))#.

      fig, ax = plt.subplots()
      im = ax.imshow(Fhats, cmap='hot', origin='lower', aspect='auto')
      ## create colorbar
      cbar = ax.figure.colorbar(im, ax=ax)
      ## cbar.ax.set_ylabel(cbarlabel, rotation=-90, va="bottom")

      ax.set_xticks(np.arange(0, len(thetasX), 5))#.
      ## ax.set_xticks(np.arange(len(thetasX)))

      ax.set_yticks(np.arange(0, len(thetasY), 5))#.
      ## ax.set_yticks(np.arange(len(thetasY)))

      ## NOTE: round tick labels, else very messy
      ## function round() does not work, have to do this way
      ## thetasX_form = [f'{th:.1f}' for th in thetasX]
      ## thetasY_form = [f'{th:.1f}' for th in thetasY]

      ax.set_xticklabels(thetasX[::5])#.
      ## ax.set_xticklabels(thetasX)
      ## ax.set_xticklabels(thetasX_form)

      ax.set_yticklabels(thetasY[::5])#.
      ## ax.set_yticklabels(thetasY)
      ## ax.set_yticklabels(thetasY_form)

      ## rotate the tick labels and set their alignment.
      ## plt.setp(ax.get_xticklabels(), rotation=45, ha="right",rotation_mode="anchor")

      ax.set_title(title)
      ax.set_xlabel(labelX)
      ax.set_ylabel(labelY)

      ## fig.tight_layout()
      plt.show()
      return True

# %% ../nbs/06_visualization.ipynb 15
@patch
def plot_Fhat_map_4(self:Visualization,  ## no sub-vectors
      FhatI_theta_I,
      thetasX, thetasY, labelX, labelY, title,
      thetaFixed1, thetaFixed2):
      ## Fhat_values = [FhatI_theta_I[(thetaX,thetaY)] for thetaY in thetasY for thetaX in thetasX]
      Fhat_values = [
        FhatI_theta_I[(thetaX,thetaY, thetaFixed1,thetaFixed2)]
        for thetaY in thetasY
          for thetaX in thetasX]
      Fhats = np.array(Fhat_values)
      increment_count = len(thetasX)
      Fhats = np.reshape(Fhats, (-1, increment_count))#.

      fig, ax = plt.subplots()
      im = ax.imshow(Fhats, cmap='hot', origin='lower', aspect='auto')
      ## create colorbar
      cbar = ax.figure.colorbar(im, ax=ax)
      ## cbar.ax.set_ylabel(cbarlabel, rotation=-90, va="bottom")

      ax.set_xticks(np.arange(0, len(thetasX), 5))#.
      ## ax.set_xticks(np.arange(len(thetasX)))

      ax.set_yticks(np.arange(0, len(thetasY), 5))#.
      ## ax.set_yticks(np.arange(len(thetasY)))

      ## NOTE: round tick labels, else very messy
      ## function round() does not work, have to do this way
      ## thetasX_form = [f'{th:.1f}' for th in thetasX]
      ## thetasY_form = [f'{th:.1f}' for th in thetasY]

      ax.set_xticklabels(thetasX[::5])#.
      ## ax.set_xticklabels(thetasX)
      ## ax.set_xticklabels(thetasX_form)

      ax.set_yticklabels(thetasY[::5])#.
      ## ax.set_yticklabels(thetasY)
      ## ax.set_yticklabels(thetasY_form)

      ## rotate the tick labels and set their alignment.
      ## plt.setp(ax.get_xticklabels(), rotation=45, ha="right",rotation_mode="anchor")

      ax.set_title(title)
      ax.set_xlabel(labelX)
      ax.set_ylabel(labelY)

      ## fig.tight_layout()
      plt.show()
      return True

# %% ../nbs/06_visualization.ipynb 16
@patch
def plot_Fhat_map_5(self:Visualization, ## no sub-vectors
      FhatI_theta_I,
      thetasX, thetasY, labelX, labelY, title,
      thetaFixed1, thetaFixed2, thetaFixed3):
      ## Fhat_values = [FhatI_theta_I[(thetaX,thetaY)] for thetaY in thetasY for thetaX in thetasX]
      Fhat_values = [
        FhatI_theta_I[(thetaX,thetaY, thetaFixed1,thetaFixed2,thetaFixed3)]
        for thetaY in thetasY
          for thetaX in thetasX]
      Fhats = np.array(Fhat_values)
      increment_count = len(thetasX)
      Fhats = np.reshape(Fhats, (-1, increment_count))#.

      fig, ax = plt.subplots()
      im = ax.imshow(Fhats, cmap='hot', origin='lower', aspect='auto')
      ## create colorbar
      cbar = ax.figure.colorbar(im, ax=ax)
      ## cbar.ax.set_ylabel(cbarlabel, rotation=-90, va="bottom")

      ax.set_xticks(np.arange(0, len(thetasX), 5))#.
      ## ax.set_xticks(np.arange(len(thetasX)))

      ax.set_yticks(np.arange(0, len(thetasY), 5))#.
      ## ax.set_yticks(np.arange(len(thetasY)))

      ## NOTE: round tick labels, else very messy
      ## function round() does not work, have to do this way
      ## thetasX_form = [f'{th:.1f}' for th in thetasX]
      ## thetasY_form = [f'{th:.1f}' for th in thetasY]

      ax.set_xticklabels(thetasX[::5])#.
      ## ax.set_xticklabels(thetasX)
      ## ax.set_xticklabels(thetasX_form)

      ax.set_yticklabels(thetasY[::5])#.
      ## ax.set_yticklabels(thetasY)
      ## ax.set_yticklabels(thetasY_form)

      ## rotate the tick labels and set their alignment.
      ## plt.setp(ax.get_xticklabels(), rotation=45, ha="right",rotation_mode="anchor")

      ax.set_title(title)
      ax.set_xlabel(labelX)
      ax.set_ylabel(labelY)

      ## fig.tight_layout()
      plt.show()
      return True

# %% ../nbs/06_visualization.ipynb 17
@patch
## color_style examples: 'r-', 'b:', 'g--'
def plot_Fhat_chart(self:Visualization, FhatI_theta_I, thetasX, labelX, labelY, title, color_style, thetaStar):
      mpl.rcParams['lines.linewidth'] = 1.2
      xylabelsize = 16
      ## plt.figure(figsize=(13, 9))
      plt.figure(figsize=(13, 4))
      plt.title(title, fontsize=20)
      Fhats = FhatI_theta_I.values()
      plt.plot(thetasX, Fhats, color_style)
      plt.axvline(x=thetaStar, color='k', linestyle=':')
      plt.xlabel(labelX, rotation=0, labelpad=10, ha='right', va='center', fontweight='bold', size=xylabelsize)
      plt.ylabel(labelY, rotation=0, labelpad=1, ha='right', va='center', fontweight='normal', size=xylabelsize)
      plt.show()

# %% ../nbs/06_visualization.ipynb 18
@patch
## expanding Fhat chart
def plot_expFhat_chart(self:Visualization, df, labelX, labelY, title, color_style):
    mpl.rcParams['lines.linewidth'] = 1.2
    xylabelsize = 16
    plt.figure(figsize=(13, 4))
    plt.title(title, fontsize=20)
    plt.plot(df, color_style)
    plt.xlabel(labelX, rotation=0, labelpad=10, ha='right', va='center', fontweight='bold', size=xylabelsize)
    plt.ylabel(labelY, rotation=0, labelpad=1, ha='right', va='center', fontweight='normal', size=xylabelsize)
    plt.show()

# %% ../nbs/06_visualization.ipynb 19
## expanding Fhat charts
@patch
def plot_expFhat_charts(self:Visualization, means, stdvs, labelX, labelY, suptitle, pars=defaultdict(str)):
    n_charts = 2
    xlabelsize = 14
    ylabelsize = 14
    mpl.rcParams['lines.linewidth'] = 1.2
    default_colors = plt.rcParams['axes.prop_cycle'].by_key()['color']
    fig, axs = plt.subplots(n_charts, sharex=True)
    fig.set_figwidth(13); fig.set_figheight(9)
    fig.suptitle(suptitle, fontsize=18)

    xi = 0
    legendlabels = []
    axs[xi].set_title(r"$exp\bar{C}^{cum}(\theta^*)$", loc='right', fontsize=16)
    for i,itm in enumerate(means.items()):
      axs[xi].spines['top'].set_visible(False); axs[xi].spines['right'].set_visible(True); axs[xi].spines['bottom'].set_visible(False)
      leg = axs[xi].plot(itm[1], color=pars['colors'][i])
      legendlabels.append(itm[0])
    axs[xi].set_ylabel(labelY, rotation=0, ha='right', va='center', fontweight='normal', size=ylabelsize)

    xi = 1
    axs[xi].set_title(r"$exp\tilde{C}^{cum}(\theta^*)$", loc='right', fontsize=16)
    for i,itm in enumerate(stdvs.items()):
      axs[xi].spines['top'].set_visible(False); axs[xi].spines['right'].set_visible(True); axs[xi].spines['bottom'].set_visible(False)
      ## leg = axs[xi].plot(itm[1], default_colors[i], linestyle='--')
      leg = axs[xi].plot(itm[1], pars['colors'][i], linestyle='--')
    axs[xi].set_ylabel(labelY, rotation=0, ha='right', va='center', fontweight='normal', size=ylabelsize)

    fig.legend(
      ## [leg],
      labels=legendlabels,
      title="Policies",
      loc='upper right',
      fancybox=True,
      shadow=True,
      ncol=1)
    plt.xlabel(labelX, rotation=0, labelpad=10, ha='right', va='center', fontweight='normal', size=xlabelsize)
    plt.show()

# %% ../nbs/06_visualization.ipynb 20
@patch
def plot_records(self:Visualization, params, df, df_non, pars=defaultdict(str)):
    ## add capacities
    df = copy(df)
    df['dow'] = df['dt'].dt.day_of_week
    for i,an in enumerate(params.aNAMES):
      df[f'cap_{an}'] = \
        df.apply(lambda row: \
          params.get_capacities(dow=row['dow'])[i], axis=1)

    n_a = len(params.aNAMES)
    n_b = len(params.bNAMES)
    n_ab = len(params.abNAMES)
    n_x = 1
    n_charts = n_ab + n_b + n_a + n_b + 3 + 1 + 4 + 1
    ylabelsize = 14
    mpl.rcParams['lines.linewidth'] = 1.2
    mycolors = ['g', 'b']
    fig, axs = plt.subplots(n_charts, sharex=True)
    # ///////////////////////////////
    # /////////// TODO: TRY /////////
    # fig, axs = plt.subplots(n_charts, sharex=True, figsize(13, 20))
    # \\\\\\\\\\\\\\\\\\\\\
    ## fig.set_figwidth(13); fig.set_figheight(9)
    fig.set_figwidth(13); fig.set_figheight(25)
    fig.suptitle(pars['suptitle'], fontsize=14)
    WHERE = 'post' ## pre or post
    T = pars['T'] #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    xi = 0
    for i,ab in enumerate(params.abNAMES):
      axs[xi+i].set_ylim(0, 1); axs[xi+i].spines['top'].set_visible(False); axs[xi+i].spines['right'].set_visible(True); axs[xi+i].spines['bottom'].set_visible(False)
      axs[xi+i].step(df[f'Allocd_t_{ab}'], 'm-', where=WHERE)
      axs[xi+i].step(0.5*df[f"RAvail_t_{ab.split('___')[0]}"], 'g:', where=WHERE)
      axs[xi+i].step(0.7*df[f"RComplete_t_{ab.split('___')[0]}"], 'r:', where=WHERE)
      if not df_non is None: axs[xi+i].step(df_non[f'Allocd_t_{ab}'], 'c-.', where=WHERE)
      axs[xi+i].axhline(y=0, color='k', linestyle=':')
      abl = ab.split("___")
      al = abl[0].split('_'); al = al[0]+'\_'+al[1]; bl = abl[1]
      y1ab = '$x^{Allocd}_{t,'+f'{",".join([al, bl])}'+'}$'
      axs[xi+i].set_ylabel(y1ab, rotation=0, ha='right', va='center', fontweight='bold', size=ylabelsize)
      for j in range(df.shape[0]//params.SLOTS_PER_DAY): axs[xi+i].axvline(x=(j+1)*params.SLOTS_PER_DAY, color='grey', ls=':')
      for j in range(df.shape[0]//T): axs[xi+i].axvline(x=(j+1)*T, color='black', ls='-.')

    xi = n_ab
    for i,b in enumerate(params.bNAMES):
      y1ab = '$D^{Max,Slot,Busy,Vol,Rev}_{t,'+f'{b}'+'}$'
      axs[xi+i].set_ylim(auto=True); axs[xi+i].spines['top'].set_visible(False); axs[xi+i].spines['right'].set_visible(True); axs[xi+i].spines['bottom'].set_visible(False)
      axs[xi+i].step(df[f'DSlot_t_{b}'], 'orange', linestyle='-', where=WHERE)
      axs[xi+i].step(df[f'DBusy_t_{b}'], 'blue', linestyle='-', where=WHERE)
      axs[xi+i].step(df[f'DVolume_t_{b}'], 'green', linestyle='-', where=WHERE)
      axs[xi+i].step(df[f'DRevenue_t_{b}'], 'red', linestyle='-', where=WHERE)
      yt = axs[xi+i].get_ylim()[1]
      axs[xi+i].step(df[f'DMax_t_{b}'] + 0.02*yt, 'black', linestyle=':', where=WHERE)

      ## if not df_non is None: axs[xi+i].step(df_non[f'DSlot_t_{b}'], 'c-.', where=WHERE)
      ## axs[xi+i].axhline(y=DEM.muD[b], color='k', linestyle=':')
      axs[xi+i].axhline(y=0, color='k', linestyle=':')
      axs[xi+i].set_ylabel(y1ab, rotation=0, ha='right', va='center', fontweight='bold', size=ylabelsize)
      for j in range(df.shape[0]//params.SLOTS_PER_DAY): axs[xi+i].axvline(x=(j+1)*params.SLOTS_PER_DAY, color='grey', ls=':')
      for j in range(df.shape[0]//T): axs[xi+i].axvline(x=(j+1)*T, color='black', ls='-.')

    xi = n_ab + n_b
    axs[xi].set_ylim(auto=True); axs[xi].spines['top'].set_visible(False); axs[xi].spines['right'].set_visible(True); axs[xi].spines['bottom'].set_visible(False)
    axs[xi].step(df['B_t'], 'b-', where=WHERE)
    axs[xi].axhline(y=0, color='k', linestyle=':')
    axs[xi].axhline(y=100, color='k', linestyle=':') ## perc of 'as busy as it gets'
    axs[xi].set_ylabel('$Busyness\ B_t$', rotation=0, ha='right', va='center', fontweight='bold', size=ylabelsize);
    for j in range(df.shape[0]//params.SLOTS_PER_DAY): axs[xi].axvline(x=(j+1)*params.SLOTS_PER_DAY, color='grey', ls=':')
    for j in range(df.shape[0]//T): axs[xi].axvline(x=(j+1)*T, color='black', ls='-.')

    xi = n_ab + n_b + 1
    axs[xi].set_ylim(auto=True); axs[xi].spines['top'].set_visible(False); axs[xi].spines['right'].set_visible(True); axs[xi].spines['bottom'].set_visible(False)
    axs[xi].step(df['V_t'], 'g-', where=WHERE)
    axs[xi].axhline(y=0, color='k', linestyle=':')
    axs[xi].set_ylabel('$Volume\ V_t$', rotation=0, ha='right', va='center', fontweight='bold', size=ylabelsize);
    for j in range(df.shape[0]//params.SLOTS_PER_DAY): axs[xi].axvline(x=(j+1)*params.SLOTS_PER_DAY, color='grey', ls=':')
    for j in range(df.shape[0]//T): axs[xi].axvline(x=(j+1)*T, color='black', ls='-.')

    xi = n_ab + n_b + 2
    axs[xi].set_ylim(auto=True); axs[xi].spines['top'].set_visible(False); axs[xi].spines['right'].set_visible(True); axs[xi].spines['bottom'].set_visible(False)
    axs[xi].step(df['N_t'], 'r-', where=WHERE)
    axs[xi].axhline(y=0, color='k', linestyle=':')
    axs[xi].set_ylabel('$Revenue\ N_t$', rotation=0, ha='right', va='center', fontweight='bold', size=ylabelsize);
    for j in range(df.shape[0]//params.SLOTS_PER_DAY): axs[xi].axvline(x=(j+1)*params.SLOTS_PER_DAY, color='grey', ls=':')
    for j in range(df.shape[0]//T): axs[xi].axvline(x=(j+1)*T, color='black', ls='-.')

    xi = n_ab + n_b + 3
    for i,a in enumerate(params.aNAMES):
      axs[xi+i].set_ylim(auto=True); axs[xi+i].spines['top'].set_visible(False); axs[xi+i].spines['right'].set_visible(True); axs[xi+i].spines['bottom'].set_visible(False)
      axs[xi+i].step(df[f'RCumSlots_t_{a}'], 'm-', where=WHERE)
      ## axs[xi+i].step(df[f'RCumMerits_t_{a}'], 'b:', where=WHERE)
      ## if not df_non is None: axs[xi+i].step(df_non[f'RAvail_t_{a}'], 'c-.', where=WHERE)
      if not df_non is None: axs[xi+i].step(df_non[f'RCumSlots_t_{a}'], 'c-.', where=WHERE)
      axs[xi+i].axhline(y=0, color='k', linestyle=':')
      cap = df[f'cap_{a}']
      axs[xi+i].step(df[f'cap_{a}'], 'r:', where=WHERE)
      al = a.split('_'); al = al[0]+'\_'+al[1]; y1ab = '$R^{CumSlots}_{t,'+f'{al}'+'}$'
      axs[xi+i].set_ylabel(y1ab, rotation=0, ha='right', va='center', fontweight='bold', size=ylabelsize)
      for j in range(df.shape[0]//params.SLOTS_PER_DAY): axs[xi+i].axvline(x=(j+1)*params.SLOTS_PER_DAY, color='grey', ls=':')
      for j in range(df.shape[0]//T): axs[xi+i].axvline(x=(j+1)*T, color='black', ls='-.')

    xi = n_ab + n_b + 3 + n_a
    Ucum_cols = ['Ucum_'+bn for bn in params.bNAMES]
    ymax = max(list(df[Ucum_cols].max()))
    for i,b in enumerate(params.bNAMES):
      y1ab = '$U^{cum}_{'+f'{b}'+'}$'
      axs[xi+i].set_ylim(0, ymax); axs[xi+i].spines['top'].set_visible(False); axs[xi+i].spines['right'].set_visible(True); axs[xi+i].spines['bottom'].set_visible(False)
      axs[xi+i].step(df[f'Ucum_{b}'], 'r-', where=WHERE)
      if not df_non is None: axs[xi+i].step(df_non[f'Ucum_{b}'], 'c-.', where=WHERE)
      axs[xi+i].axhline(y=ymax, color='r', linestyle=':')
      axs[xi+i].set_ylabel(y1ab, rotation=0, ha='right', va='center', fontweight='bold', size=ylabelsize)
      for j in range(df.shape[0]//params.SLOTS_PER_DAY): axs[xi+i].axvline(x=(j+1)*params.SLOTS_PER_DAY, color='grey', ls=':')
      for j in range(df.shape[0]//T): axs[xi+i].axvline(x=(j+1)*T, color='black', ls='-.')

    xi = n_ab + n_b + 3 + n_a + n_b
    axs[xi].set_ylim(auto=True); axs[xi].spines['top'].set_visible(False); axs[xi].spines['right'].set_visible(True); axs[xi].spines['bottom'].set_visible(False)
    axs[xi].step(df['Ucum_Total'], 'k-', where=WHERE)
    if not df_non is None: axs[xi].step(df_non['Ucum_Total'], 'c-.', where=WHERE)
    axs[xi].axhline(y=0, color='k', linestyle=':')
    axs[xi].set_ylabel('$U^{cum}_{Total}$'+'\n'+''+'$\mathrm{[Allocs]}$', rotation=0, ha='right', va='center', fontweight='bold', size=ylabelsize);
    for j in range(df.shape[0]//params.SLOTS_PER_DAY): axs[xi].axvline(x=(j+1)*params.SLOTS_PER_DAY, color='grey', ls=':')
    for j in range(df.shape[0]//T): axs[xi].axvline(x=(j+1)*T, color='black', ls='-.')

    xi = n_ab + n_b + 3 + n_a + n_b + 1
    axs[xi].set_ylim(auto=True); axs[xi].spines['top'].set_visible(False); axs[xi].spines['right'].set_visible(True); axs[xi].spines['bottom'].set_visible(False)
    axs[xi].step(df['Ccum_CumSlots'], 'm-', where=WHERE)
    if not df_non is None: axs[xi].step(df_non['Ccum_CumSlots'], 'c-.', where=WHERE)
    axs[xi].axhline(y=0, color='k', linestyle=':')
    axs[xi].set_ylabel('$C^{cum}_{CumSlots}$', rotation=0, ha='right', va='center', fontweight='bold', size=ylabelsize);
    for j in range(df.shape[0]//params.SLOTS_PER_DAY): axs[xi].axvline(x=(j+1)*params.SLOTS_PER_DAY, color='grey', ls=':')
    for j in range(df.shape[0]//T): axs[xi].axvline(x=(j+1)*T, color='black', ls='-.')

    xi = n_ab + n_b + 3 + n_a + n_b + 2
    axs[xi].set_ylim(auto=True); axs[xi].spines['top'].set_visible(False); axs[xi].spines['right'].set_visible(True); axs[xi].spines['bottom'].set_visible(False)
    axs[xi].step(df['Ccum_SickProb'], 'm-', where=WHERE)
    if not df_non is None: axs[xi].step(df_non['Ccum_SickProb'], 'c-.', where=WHERE)
    axs[xi].axhline(y=0, color='k', linestyle=':')
    axs[xi].set_ylabel('$C^{cum}_{SickProb}$', rotation=0, ha='right', va='center', fontweight='bold', size=ylabelsize);
    for j in range(df.shape[0]//params.SLOTS_PER_DAY): axs[xi].axvline(x=(j+1)*params.SLOTS_PER_DAY, color='grey', ls=':')
    for j in range(df.shape[0]//T): axs[xi].axvline(x=(j+1)*T, color='black', ls='-.')

    xi = n_ab + n_b + 3 + n_a + n_b + 3
    axs[xi].set_ylim(auto=True); axs[xi].spines['top'].set_visible(False); axs[xi].spines['right'].set_visible(True); axs[xi].spines['bottom'].set_visible(False)
    axs[xi].step(df['Ccum_CumMerits'], 'm-', where=WHERE)
    if not df_non is None: axs[xi].step(df_non['Ccum_CumMerits'], 'c-.', where=WHERE)
    axs[xi].axhline(y=0, color='k', linestyle=':')
    axs[xi].set_ylabel('$C^{cum}_{CumMerits}$', rotation=0, ha='right', va='center', fontweight='bold', size=ylabelsize);
    for j in range(df.shape[0]//params.SLOTS_PER_DAY): axs[xi].axvline(x=(j+1)*params.SLOTS_PER_DAY, color='grey', ls=':')
    for j in range(df.shape[0]//T): axs[xi].axvline(x=(j+1)*T, color='black', ls='-.')

    xi = n_ab + n_b + 3 + n_a + n_b + 4
    axs[xi].set_ylim(auto=True); axs[xi].spines['top'].set_visible(False); axs[xi].spines['right'].set_visible(True); axs[xi].spines['bottom'].set_visible(False)
    axs[xi].step(df['Ccum_ContSlots'], 'm-', where=WHERE)
    if not df_non is None: axs[xi].step(df_non['Ccum_ContSlots'], 'c-.', where=WHERE)
    axs[xi].axhline(y=0, color='k', linestyle=':')
    axs[xi].set_ylabel('$C^{cum}_{ContSlots}$', rotation=0, ha='right', va='center', fontweight='bold', size=ylabelsize);
    for j in range(df.shape[0]//params.SLOTS_PER_DAY): axs[xi].axvline(x=(j+1)*params.SLOTS_PER_DAY, color='grey', ls=':')
    for j in range(df.shape[0]//T): axs[xi].axvline(x=(j+1)*T, color='black', ls='-.')

    xi = n_ab + n_b + 3 + n_a + n_b + 5
    axs[xi].set_ylim(auto=True); axs[xi].spines['top'].set_visible(False); axs[xi].spines['right'].set_visible(True); axs[xi].spines['bottom'].set_visible(False)
    axs[xi].step(df['Ccum'], 'm-', where=WHERE)
    ## axs[xi].step(df['Ucum_Total'], 'k-', where=WHERE)
    if not df_non is None: axs[xi].step(df_non['Ccum'], 'c-.', where=WHERE)
    axs[xi].axhline(y=0, color='k', linestyle=':')
    axs[xi].set_ylabel('$C^{cum}$', rotation=0, ha='right', va='center', fontweight='bold', size=ylabelsize);
    for j in range(df.shape[0]//params.SLOTS_PER_DAY): axs[xi].axvline(x=(j+1)*params.SLOTS_PER_DAY, color='grey', ls=':')
    for j in range(df.shape[0]//T): axs[xi].axvline(x=(j+1)*T, color='black', ls='-.')

    axs[xi].set_xlabel(pars['xlabel'], rotation=0, ha='right', va='center', fontweight='bold', size=ylabelsize);
    if(pars['legendLabels']): fig.legend(labels=pars['legendLabels'], loc='lower left', fontsize=16)

# %% ../nbs/06_visualization.ipynb 21
@patch
def plot_demand_sources(self:Visualization, params, df, pars=defaultdict(str)):
      n_b = len(params.bNAMES)
      n_charts = n_b + 1 + 1 + 1
      ylabelsize = 14
      mpl.rcParams['lines.linewidth'] = 1.2
      mycolors = ['g', 'b']
      fig, axs = plt.subplots(n_charts, sharex=True)
      fig.set_figwidth(13); fig.set_figheight(9)
      fig.suptitle(pars['suptitle'], fontsize=14)
      WHERE = 'post' #'pre' #'post'
      T = pars['T'] #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

      xi = 0
      for i,b in enumerate(params.bNAMES):
        y1ab = '$D^{Max,Slot,Busy,Volume,Revenue}_{t,'+f'{b}'+'}$'
        axs[xi+i].set_ylim(auto=True); axs[xi+i].spines['top'].set_visible(False); axs[xi+i].spines['right'].set_visible(True); axs[xi+i].spines['bottom'].set_visible(False)
        axs[xi+i].step(df[f'DSlot_t_{b}'], 'orange', linestyle='-', where=WHERE)
        axs[xi+i].step(df[f'DBusy_t_{b}'], 'blue', linestyle='-', where=WHERE)
        axs[xi+i].step(df[f'DVolume_t_{b}'], 'green', linestyle='-', where=WHERE)
        axs[xi+i].step(df[f'DRevenue_t_{b}'], 'red', linestyle='-', where=WHERE)
        yt = axs[xi+i].get_ylim()[1]
        axs[xi+i].step(df[f'DMax_t_{b}'] + 0.02*yt, 'black', linestyle=':', where=WHERE)

        ## axs[xi+i].axhline(y=DEM.muD[b], color='k', linestyle=':')
        axs[xi+i].axhline(y=0, color='k', linestyle=':')
        axs[xi+i].set_ylabel(y1ab, rotation=0, ha='right', va='center', fontweight='bold', size=ylabelsize)
        for j in range(df.shape[0]//params.SLOTS_PER_DAY): axs[xi+i].axvline(x=(j+1)*params.SLOTS_PER_DAY, color='grey', ls=':')
        for j in range(df.shape[0]//T): axs[xi+i].axvline(x=(j+1)*T, color='black', ls='-.')

      xi = n_b
      axs[xi].set_ylim(auto=True); axs[xi].spines['top'].set_visible(False); axs[xi].spines['right'].set_visible(True); axs[xi].spines['bottom'].set_visible(False)
      axs[xi].step(df['B_t'], 'b-', where=WHERE)
      axs[xi].axhline(y=0, color='k', linestyle=':')
      axs[xi].axhline(y=100, color='k', linestyle=':') ## perc of 'as busy as it gets'
      axs[xi].set_ylabel('$Business\ B_t$', rotation=0, ha='right', va='center', fontweight='bold', size=ylabelsize);
      for j in range(df.shape[0]//params.SLOTS_PER_DAY): axs[xi].axvline(x=(j+1)*params.SLOTS_PER_DAY, color='grey', ls=':')
      for j in range(df.shape[0]//T): axs[xi].axvline(x=(j+1)*T, color='black', ls='-.')

      xi = n_b + 1
      axs[xi].set_ylim(auto=True); axs[xi].spines['top'].set_visible(False); axs[xi].spines['right'].set_visible(True); axs[xi].spines['bottom'].set_visible(False)
      axs[xi].step(df['V_t'], 'g-', where=WHERE)
      axs[xi].axhline(y=0, color='k', linestyle=':')
      axs[xi].set_ylabel('$Volume\ V_t$', rotation=0, ha='right', va='center', fontweight='bold', size=ylabelsize);
      for j in range(df.shape[0]//params.SLOTS_PER_DAY): axs[xi].axvline(x=(j+1)*params.SLOTS_PER_DAY, color='grey', ls=':')
      for j in range(df.shape[0]//T): axs[xi].axvline(x=(j+1)*T, color='black', ls='-.')

      xi = n_b + 2
      axs[xi].set_ylim(auto=True); axs[xi].spines['top'].set_visible(False); axs[xi].spines['right'].set_visible(True); axs[xi].spines['bottom'].set_visible(False)
      axs[xi].step(df['N_t'], 'r-', where=WHERE)
      axs[xi].axhline(y=0, color='k', linestyle=':')
      axs[xi].set_ylabel('$Revenue\ N_t$', rotation=0, ha='right', va='center', fontweight='bold', size=ylabelsize);
      for j in range(df.shape[0]//params.SLOTS_PER_DAY): axs[xi].axvline(x=(j+1)*params.SLOTS_PER_DAY, color='grey', ls=':')
      for j in range(df.shape[0]//T): axs[xi].axvline(x=(j+1)*T, color='black', ls='-.')

      axs[xi].set_xlabel(pars['xlabel'], rotation=0, ha='right', va='center', fontweight='bold', size=ylabelsize);
      if(pars['legendLabels']): fig.legend(labels=pars['legendLabels'], loc='lower left', fontsize=16)

# %% ../nbs/06_visualization.ipynb 22
@patch
def plot_evalu_comparison(self:Visualization, df1, df2, df3, pars=defaultdict(str)):
    legendlabels = ['X__BuyBelow', 'X__Bellman']
    n_charts = 5
    ylabelsize = 14
    mpl.rcParams['lines.linewidth'] = 1.2
    fig, axs = plt.subplots(n_charts, sharex=True)
    fig.set_figwidth(13); fig.set_figheight(9)
    thetaStarStr = []
    for cmp in pars["thetaStar"]: thetaStarStr.append(f'{cmp:.1f}')
    thetaStarStr = '(' + ', '.join(thetaStarStr) + ')'
    fig.suptitle(pars['suptitle'], fontsize=14)

    xi = 0
    axs[xi].set_ylim(auto=True); axs[xi].spines['top'].set_visible(False); axs[xi].spines['right'].set_visible(True); axs[xi].spines['bottom'].set_visible(False)
    axs[xi].step(df1[f'x_t'], 'r-', where='post')
    axs[xi].step(df2[f'x_t'], 'g-.', where='post')
    axs[xi].step(df3[f'x_t'], 'b:', where='post')
    axs[xi].axhline(y=0, color='k', linestyle=':')
    y1ab = '$x_{t}$'
    axs[xi].set_ylabel(y1ab, rotation=0, ha='right', va='center', fontweight='bold', size=ylabelsize)
    for j in range(df1.shape[0]//T): axs[xi].axvline(x=(j+1)*T, color='grey', ls=':')

    xi = 1
    axs[xi].set_ylim(auto=True); axs[xi].spines['top'].set_visible(False); axs[xi].spines['right'].set_visible(True); axs[xi].spines['bottom'].set_visible(False)
    axs[xi].step(df1[f'R_t'], 'r-', where='post')
    axs[xi].step(df2[f'R_t'], 'g-.', where='post')
    axs[xi].step(df3[f'R_t'], 'b:', where='post')
    axs[xi].axhline(y=0, color='k', linestyle=':')
    y1ab = '$R_{t}$'
    axs[xi].set_ylabel(y1ab, rotation=0, ha='right', va='center', fontweight='bold', size=ylabelsize)
    for j in range(df1.shape[0]//T): axs[xi].axvline(x=(j+1)*T, color='grey', ls=':')

    xi = 2
    axs[xi].set_ylim(auto=True); axs[xi].spines['top'].set_visible(False); axs[xi].spines['right'].set_visible(True); axs[xi].spines['bottom'].set_visible(False)
    axs[xi].step(df1[f'p_t'], 'r-', where='post')
    axs[xi].step(df2[f'p_t'], 'g-.', where='post')
    axs[xi].step(df3[f'p_t'], 'b:', where='post')
    axs[xi].axhline(y=0, color='k', linestyle=':')

    if(pars['lower_non']): axs[xi].text(-4, pars['lower_non'], r'$\theta^{lower}$' + f"={pars['lower_non']:.1f}", size=10, color='c')
    if(pars['lower_non']): axs[xi].axhline(y=pars['lower_non'], color='c', linestyle=':')

    if(pars['upper_non']): axs[xi].text(-4, pars['upper_non'], r'$\theta^{upper}$' + f"={pars['upper_non']:.1f}", size=10, color='c')
    if(pars['upper_non']): axs[xi].axhline(y=pars['upper_non'], color='c', linestyle=':')

    if(pars['lower']): axs[xi].text(-4, pars['lower'], r'$\theta^{lower}$' + f"={pars['lower']:.1f}", size=10, color='m')
    if(pars['lower']): axs[xi].axhline(y=pars['lower'], color='m', linestyle=':')

    if(pars['upper']): axs[xi].text(-4, pars['upper'], r'$\theta^{upper}$' + f"={pars['upper']:.1f}", size=10, color='m')
    if(pars['upper']): axs[xi].axhline(y=pars['upper'], color='m', linestyle=':')

    if(pars['alpha_non']): axs[xi].text(-4, pars['alpha_non'], r'$\theta^{alpha}$' + f"={pars['alpha_non']:.1f}", size=10, color='c')
    if(pars['alpha_non']): axs[xi].axhline(y=pars['alpha_non'], color='c', linestyle=':')

    if(pars['trackSignal_non']): axs[xi].text(-4, pars['trackSignal_non'], r'$\theta^{trackSignal}$' + f"={pars['trackSignal_non']:.1f}", size=10, color='c')
    if(pars['trackSignal_non']): axs[xi].axhline(y=pars['trackSignal_non'], color='c', linestyle=':')

    if(pars['alpha']): axs[xi].text(-4, pars['alpha'], r'$\theta^{alpha}$' + f"={pars['alpha']:.1f}", size=10, color='m')
    if(pars['alpha']): axs[xi].axhline(y=pars['alpha'], color='m', linestyle=':')

    if(pars['trackSignal']): axs[xi].text(-4, pars['trackSignal'], r'$\theta^{trackSignal}$' + f"={pars['trackSignal']:.1f}", size=10, color='m')
    if(pars['trackSignal']): axs[xi].axhline(y=pars['trackSignal'], color='m', linestyle=':')

    y1ab = '$p_{t}$'
    axs[xi].set_ylabel(y1ab, rotation=0, ha='right', va='center', fontweight='bold', size=ylabelsize)
    for j in range(df1.shape[0]//T): axs[xi].axvline(x=(j+1)*T, color='grey', ls=':')

    xi = 3
    axs[xi].set_ylim(auto=True); axs[xi].spines['top'].set_visible(False); axs[xi].spines['right'].set_visible(True); axs[xi].spines['bottom'].set_visible(False)
    axs[xi].step(df1['b_t_val'], 'r-', where='post')
    axs[xi].step(df2['b_t_val'], 'g-.', where='post')
    axs[xi].step(df3['b_t_val'], 'b:', where='post')
    axs[xi].axhline(y=0, color='k', linestyle=':')
    y1ab = '$b_{t,val}$'
    axs[xi].set_ylabel(y1ab, rotation=0, ha='right', va='center', fontweight='bold', size=ylabelsize)
    for j in range(df1.shape[0]//T): axs[xi].axvline(x=(j+1)*T, color='grey', ls=':')

    xi = 4
    axs[xi].set_ylim(auto=True); axs[xi].spines['top'].set_visible(False); axs[xi].spines['right'].set_visible(True); axs[xi].spines['bottom'].set_visible(False)
    axs[xi].step(df1['Ccum'], 'r-', where='post')
    axs[xi].step(df2['Ccum'], 'g-.', where='post')
    axs[xi].step(df3['Ccum'], 'b:', where='post')
    axs[xi].axhline(y=0, color='k', linestyle=':')
    axs[xi].set_ylabel('$\mathrm{cumC}$'+'\n'+'$\mathrm{(Profit)}$'+'\n'+''+'$\mathrm{[\$]}$', rotation=0, ha='right', va='center', fontweight='bold', size=ylabelsize);
    axs[xi].set_xlabel('$t\ \mathrm{[decision\ windows]}$', rotation=0, ha='right', va='center', fontweight='bold', size=ylabelsize);
    for j in range(df1.shape[0]//T): axs[xi].axvline(x=(j+1)*T, color='grey', ls=':')

    fig.legend(
      ## [leg],
      labels=legendlabels,
      title="Policies",
      loc='upper right',
      fontsize=16,
      fancybox=True,
      shadow=True,
      ncol=1)
