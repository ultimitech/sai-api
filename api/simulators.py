# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_simulators.ipynb.

# %% auto 0
__all__ = ['dPars', 'DemandSimulator', 'MeritSimulator']

# %% ../nbs/03_simulators.ipynb 5
# from collections import namedtuple, defaultdict
import numpy as np
import pandas as pd
import matplotlib as mpl
import matplotlib.pyplot as plt
# import time
# import math
# from pprint import pprint
## !pip install -U "ray"
# import ray
# import json
import random

import aishiftscheduler.config as cf
import aishiftscheduler.loader as ldr
import aishiftscheduler.parameters as par

# %% ../nbs/03_simulators.ipynb 9
pd.options.display.float_format = '{:,.4f}'.format
pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', None)
pd.set_option('display.max_colwidth', None)

# %% ../nbs/03_simulators.ipynb 11
dPars = par.Parameters() #dummy Pars

# %% ../nbs/03_simulators.ipynb 12
class DemandSimulator():
  def __init__(self,
        T__sim=dPars.SIM_T,
        muD=dPars.SIM_MU_D,
        eventTimeD=dPars.SIM_EVENT_TIME_D,
        muDeltaD=dPars.SIM_MU_DELTA_D,
        seed=None):
    self.time = 0
    self.T__sim = dPars.SIM_T
    self.muD = dPars.SIM_MU_D
    self.eventTimeD = dPars.SIM_EVENT_TIME_D
    self.muDeltaD = dPars.SIM_MU_DELTA_D
    self.prng = np.random.RandomState(seed)

  def simulate(self):
    if self.time > self.T__sim - 1:
      self.time = 0
    D_tt1 = {}
    for bn in dPars.bNAMES:
      if self.eventTimeD[bn] and self.time > self.eventTimeD[bn]: ##event for entity
        D_tt1[bn] = self.muDeltaD[bn] + self.prng.poisson(self.muD[bn]) ##after event
      else:
        D_tt1[bn] = self.prng.poisson(self.muD[bn])
    self.time += 1
    return {bn: max(0, D_tt1[bn]) for bn in dPars.bNAMES} ##always positive

# %% ../nbs/03_simulators.ipynb 20
class MeritSimulator(): ## copy from the generated file and paste into ExogInfo tab of shift_scheduler_data.xlsx
  def __init__(self, seed=None):
    self.prng = np.random.RandomState(seed)

  def simulate(self):
    M_tt1 = {}
    for an in dPars.aNAMES:
      resourceId,_ = an.split('_')
      a,b = dPars.MERIT_PROBS.loc[
        dPars.MERIT_PROBS['ResourceId'] == resourceId,
        ['MeritProb', 'DemeritProb']
      ].values[0]
      if np.random.uniform() < a: merit = 1
      else: merit = 0
      if np.random.uniform() < b: demerit = 1
      else: demerit = 0
      M_tt1[an] = merit - demerit ##net merit
    return M_tt1
